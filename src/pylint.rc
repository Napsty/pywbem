#
# PyLint configuration file for PyWBEM project
#

[MASTER]

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Profiled execution.
profile=no

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore=.svn,.git

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=


[MESSAGES CONTROL]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time. See also the "--disable" option for examples.
#enable=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"
disable=I0011,
        too-many-locals, too-many-branches, too-many-statements,
        too-many-lines, too-many-public-methods,
        too-many-nested-blocks, too-many-return-statements, too-many-arguments,
        wildcard-import, unused-wildcard-import,

# Note: The too-many-* messages are excluded temporarily, and should be dealt
#       with at some point.

# Note: wildcard related messages are excluded because the original external
#       interface uses wildcard imports and we cannot change that without
#       breaking compatibility. We could move the message control statements
#       into the source code, though.

# Note: messages are described here: http://pylint-messages.wikidot.com/all-messages


[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=text

# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]".
files-output=no

# Tells whether to display a full report or only the messages
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Add a comment according to your evaluation note. This is used by the global
# evaluation report (RP0004).
comment=no

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details:
# http://docs.pylint.org/output.html#reports-section
# Note: This format only affects output format text, but not html.
# Note: The vim quickfix support by default recognizes the following format:
#   {path}:{line}: ...
#   {path}:{line}: {msg_id} {obj}: {msg}
# Note: Eclipse needs the following format:
#   {C}:{line:3d},{column:2d}: {msg} ({symbol})
# However, some messages show the source code in additional lines, as
# part of the {msg} field, and this causes Eclipse by mistake to suppress
# the entire message. So for now, we omit the {msg} field, for Eclipse:
#   '{C}:{line:3d},{column:2d}: ({symbol})'
# Note: The default format is:
#   {C}:{line:3d},{column:2d}: {msg} ({symbol})
msg-template='{C}:{line:3d},{column:2d}: {msg} ({symbol})'


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


[BASIC]

# Required attributes for module, separated by a comma
required-attributes=

# List of builtins function names that should not be used, separated by a comma
bad-functions=map,filter,apply,input

# Regular expression which should only match correct module names.
# The intention is to allow: "lower_case_with_underscores"; leading underscores
# for privacy are allowed.
module-rgx=(__.+__|_{0,1}[a-z][a-z0-9_]{2,29})$

# Regular expression which should only match correct module level variable names.
# The intention is to allow: "UPPER_CASE_WITH_UNDERSCORES" for constants, and
# not to allow variables that change. Leading underscores for privacy are allowed.
const-rgx=(__.+__|_{0,1}[A-Z][A-Z0-9_]{2,39})$

# Regular expression which should only match correct class names.
# The intention is to allow: "CamelCaseWithoutUnderscores"; leading underscores
# for privacy are allowed. Note that PEP 8 states that class names for callable
# classes can also use function name syntax. This is not reflected in this
# regexp; callable classes that follow that convention should disable PyLint
# message C0103.
class-rgx=_{0,1}[A-Z][a-zA-Z0-9]{2,29}$

# Regular expression which should only match correct (non-method) function names.
# The intention is to allow: "lower_case_with_underscores" and
# "mixedCaseWithoutUnderscores"; leading underscores for privacy are allowed.
# TODO: Verify whether two leading underscores are allowed / supported with name mangling.
function-rgx=(__.+__|_{0,2}([a-z][a-z0-9_]{2,29}|[a-z][a-zA-Z0-9]{2,29}))$

# Regular expression which should only match correct method names.
# The intention is to allow: "lower_case_with_underscores" and
# "mixedCaseWithoutUnderscores"; leading underscores for privacy are allowed.
method-rgx=(__.+__|_{0,2}([a-z][a-z0-9_]{2,29}|[a-z][a-zA-Z0-9]{2,29}))$

# Regular expression which should only match correct instance variable (attribute) names.
# The intention is to allow: "lower_case_with_underscores" and
# "mixedCaseWithoutUnderscores"; leading underscores for privacy are allowed.
attr-rgx=(__.+__|_{0,2}([a-z][a-z0-9_]{2,29}|[a-z][a-zA-Z0-9]{2,29}))$

# Regular expression which should only match correct argument names.
# The intention is to allow: "lower_case_with_underscores" and
# "mixedCaseWithoutUnderscores"; leading underscores are NOT allowed.
argument-rgx=([a-z][a-z0-9_]{0,29}|[a-z][a-zA-Z0-9]{0,29})$

# Regular expression which should only match correct local variable names.
# The intention is to allow: "UPPER_CASE_WITH_UNDERSCORES" for constants,
# and "lower_case_with_underscores" and "mixedCaseWithoutUnderscores" for
# changing variables; leading underscores for privacy are allowed.
variable-rgx=_{0,1}([A-Z][A-Z0-9_]{0,39}|[a-z][a-z0-9_]{0,29}|[a-z][a-zA-Z0-9]{0,29})$

# Regular expression which should only match correct attribute names in class
# bodies.
# The intention is to allow: "UPPER_CASE_WITH_UNDERSCORES" for constants,
# and "lower_case_with_underscores" and "mixedCaseWithoutUnderscores" for
# changing variables; leading underscores for privacy are allowed.
class-attribute-rgx=(__.+__|_{0,2}([A-Z][A-Z0-9_]{2,39}|[a-z][a-z0-9_]{2,29}|[a-z][a-zA-Z0-9]{2,29}))$

# Regular expression which should only match correct list comprehension /
# generator expression variable names.
# The intention is to allow: "lower_case_with_underscores" and
# "mixedCaseWithoutUnderscores"; leading underscores for privacy are allowed.
inlinevar-rgx=_{0,1}([a-z][a-z0-9_]{0,29}|[a-z][a-zA-Z0-9]{0,29})$

# Good variable names which should always be accepted, separated by a comma
# TODO: Move i,... to local var and inline var; move _ to arg and local var and inline var.
good-names=_,f,i,j,k,m,n

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata,l,O,I

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=__.*__

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes=SQLObject

# When zope mode is activated, add a predefined set of Zope acquired attributes
# to generated-members.
zope=no

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed. Python regular
# expressions are accepted.
generated-members=REQUEST,acl_users,aq_parent


[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
init-import=no

# A regular expression matching the beginning of the name of dummy variables
# (i.e. not used).
dummy-variables-rgx=_$|dummy_|unused_

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=


[FORMAT]

# Maximum number of characters on a single line.
max-line-length=80

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no

# List of optional constructs for which whitespace checking is disabled
no-space-check=trailing-comma,dict-separator

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '


[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=8

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no


[CLASSES]

# List of interface methods to ignore, separated by a comma. This is used for
# instance to not check methods defines in Zope's Interface base class.
ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs


[DESIGN]

# Maximum number of arguments for function / method
max-args=8

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
max-locals=20

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branches=15

# Maximum number of statements in function / method body
# TODO: What counts as a statement?
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
# TODO: Are these just variables, without methods? class & instance? including private? including inherited?
max-attributes=15

# Minimum number of public methods for a class (see R0903).
# TODO: including private? including inherited?
min-public-methods=2

# Maximum number of public methods for a class (see R0904).
max-public-methods=20


[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=Exception

