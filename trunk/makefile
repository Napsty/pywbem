# ------------------------------------------------------------------------------
# Development makefile for PyWBEM
#
# Supported platforms for this makefile:
#   Windows and Linux
#
# Prerequisite commands:
#   make (GNU make)
#   sh - used to make sure some commands are executed in unix shell on Windows
#   rm, test, find, unzip, sed, xargs, tee
#   Note: On Windows, use CygWin to get these commands.
#
# Python related prerequisites for this makefile:
#   Python 2.6 or 2.7
#   Packages:
#     epydoc 3.0.1 plus patches
#     docutils 0.12
# ------------------------------------------------------------------------------

# Name of this Python package
package_name := pywbem

# Version of this Python package
package_version := $(shell python -B setup.py --version)
package_final_version := $(shell sh -c "echo $(package_version) | sed s/-.*//")

# Latest commit level of this Python package
last_commit := $(strip $(shell sh -c "svn log .. -l 1 -q |grep -E ^r[0-9]+ |cut -d ' ' -f 1"))

# Directory for the generated distribution files
dist_dir := ../dist/$(package_name)-$(package_final_version)

# Generated distribution files (used as dependent).
# dist_build_file must be what setup.py creates in its build.
# It will then be renamed to dist_file.
dist_build_file := $(dist_dir)/$(package_name)-$(package_version).zip
dist_file := $(dist_dir)/$(package_name)-$(package_version).$(last_commit).zip

win64_dist_file := $(dist_dir)/$(package_name)-$(package_version).$(last_commit).win-amd64.exe

# Directory for generated API documentation
doc_out_dir := $(package_name)/docs

# Generated API documentation files, used as dependents
doc_html_files := \
    $(doc_out_dir)/index.html \

# Documentation generator commands
pdoc_cmd := pdoc --overwrite --html --html-dir $(doc_out_dir) $(package_name)
epydoc_cmd := epydoc --html --docformat=restructuredtext --no-private --name=PyWBEM --output=$(doc_out_dir) $(package_name)
doc_cmd := $(epydoc_cmd)

# PyLint config file
pylint_rc_file := ../../pylint.rc

# Files to be put into distribution archive.
# Keep in sync with dist_dependent_files.
# This is used for 'include' statements in MANIFEST.in. The wildcards are used
# as specified, without being expanded.
dist_manifest_in_files := \
    $(package_name)/LICENSE.txt \
    README \
    INSTALL \
    *.py \
    $(package_name)/*.py \
    $(package_name)/NEWS \
    $(doc_out_dir)/*.html \

# Files that are dependents of the distribution archive.
# Keep in sync with dist_manifest_in_files.
dist_dependent_files := \
    $(package_name)/LICENSE.txt \
    README \
    INSTALL \
    $(wildcard *.py) \
    $(wildcard $(package_name)/*.py) \
    $(package_name)/NEWS \
    $(doc_html_files) \

# No built-in rules needed:
.SUFFIXES:

.PHONY: build buildwin test install clean help

build: $(dist_file)
	@echo '$@ done; created: $(dist_file)'

buildwin: $(win64_dist_file)
	@echo '$@ done; created: $(win64_dist_file)'

check: pylint_report.html
	@echo '$@ done; for results see pylint_report.html'

test:   install
	-sh -c "cd testsuite; ./runtests.sh 2>&1 |tee runtests.log"
	@echo '$@ done; for results see testsuite/runtests.log'

install: build
	unzip -q -o -d tmp_install $(dist_file)
	sh -c "cd tmp_install/$(package_name)-$(package_version); python setup.py install"
	rm -Rf tmp_install
	@echo '$@ done.'

clean:
	rm -f MANIFEST parser.out
	sh -c "find . -name \"*.pyc\" | xargs -r rm"
	rm -Rf build tmp_install testtmp testsuite/testtmp
	@echo '$@ done.'

all: build check test install clean
	@echo '$@ done.'

help:
	@echo 'makefile for $(package_name) $(package_version)'
	@echo 'Valid targets are:'
	@echo '  build   - (default) Build the distribution archive: $(dist_file)'
#	@echo '  buildwin - (On 64-bit Windows) Build the Windows installable: $(win64_dist_file)'
	@echo '  check   - Run PyLint on sources.'
	@echo '  test    - Run unit tests.'
	@echo '  install - Build and install the distribution archive on your system as a site package.'
	@echo '  clean   - Remove any temporary files.'
	@echo '  all     - build, check, test, install, clean'

# Note: distutils depends on the right files specified in MANIFEST.in, even when
# they are already specified e.g. in 'package_data' in setup.py.
# We generate the MANIFEST.in file automatically, to have a single point of
# control (this makefile) for what gets into the distribution archive.
MANIFEST.in: makefile
	echo '# file GENERATED by makefile, do NOT edit' >$@
	echo '$(dist_manifest_in_files)' | xargs -r -n 1 echo include >>$@

# Distribution archives.
# Note: Deleting MANIFEST causes distutils (setup.py) to read MANIFEST.in and to
# regenerate MANIFEST. Otherwise, changes in MANIFEST.in will not be used.
$(dist_file): setup.py MANIFEST.in $(dist_dependent_files)
	rm -f MANIFEST
	python setup.py build sdist -d $(dist_dir)
	mv $(dist_build_file) $(dist_file)

$(win64_dist_file): setup.py MANIFEST.in $(dist_dependent_files)
	rm -f MANIFEST
	python setup.py build bdist_wininst -d $(dist_dir) -o -t "PyWBEM v$(package_version)" 

# Documentation for package (generates more .html files than just this target)
$(doc_out_dir)/index.html: $(package_name)/*.py
	sh -c "PYTHONPATH=. $(doc_cmd)"

# PyLint report
pylint_report.html: $(pylint_rc_file) setup.py $(package_name)/*.py testsuite/*.py
	-sh -c "PYTHONPATH=. pylint --rcfile=$(pylint_rc_file) --ignore=moflextab.py,mofparsetab.py --output-format=html setup.py $(package_name) testsuite/*.py >$@"
